type Query {
    user(user_guid: String!): User
    days(user_guid: String!): [Day]
    moods: [Mood]
}

type Mutation {
    register_user(email: String!, password: String!): RegisterResult
    login_user(email: String!, password: String!): LoginResult

    create_day(user_guid: String!, day: DayInput): BoolResult
}

type User {
    guid: String!
    email: String!
    email_verified: Boolean!
    name_first: String
    name_last: String
    password: String
    enabled: Boolean!
    password_last_update: Datetime
    twofatoken: String
}

type Day {
    date: Date
    title: String
    notes: String
    mood1: Mood
}

input DayInput {
    date: DateInput!
    id_mood1: Int!
    title: String!
    notes: String
}

type Mood {
    id: Int!
    title: String
    color: Int
}

type Date {
    year: Int!
    month: Int!
    day: Int!
}

input DateInput {
    year: Int!
    month: Int!
    day: Int!
}

type Time {
    hours: Int
    minutes: Int
    seconds: Int
}

type Datetime {
    date: Date
    time: Time
}

type BoolResult {
    success: Boolean!
    text: String
}

type RegisterResult {
    success: Boolean!
    user_guid: String
    message: String
}

type LoginResult {
    success: Boolean!
    message: String
    jwt: String
}
